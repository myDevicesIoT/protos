// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reading

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReadingServiceClient is the client API for ReadingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadingServiceClient interface {
	//
	//get device state
	List(ctx context.Context, in *ListReadingsRequest, opts ...grpc.CallOption) (*ListReadingsResponse, error)
}

type readingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadingServiceClient(cc grpc.ClientConnInterface) ReadingServiceClient {
	return &readingServiceClient{cc}
}

func (c *readingServiceClient) List(ctx context.Context, in *ListReadingsRequest, opts ...grpc.CallOption) (*ListReadingsResponse, error) {
	out := new(ListReadingsResponse)
	err := c.cc.Invoke(ctx, "/pkg.proto.reading.v1.ReadingService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadingServiceServer is the server API for ReadingService service.
// All implementations should embed UnimplementedReadingServiceServer
// for forward compatibility
type ReadingServiceServer interface {
	//
	//get device state
	List(context.Context, *ListReadingsRequest) (*ListReadingsResponse, error)
}

// UnimplementedReadingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReadingServiceServer struct {
}

func (UnimplementedReadingServiceServer) List(context.Context, *ListReadingsRequest) (*ListReadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeReadingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadingServiceServer will
// result in compilation errors.
type UnsafeReadingServiceServer interface {
	mustEmbedUnimplementedReadingServiceServer()
}

func RegisterReadingServiceServer(s *grpc.Server, srv ReadingServiceServer) {
	s.RegisterService(&_ReadingService_serviceDesc, srv)
}

func _ReadingService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReadingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadingServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.reading.v1.ReadingService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadingServiceServer).List(ctx, req.(*ListReadingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReadingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.reading.v1.ReadingService",
	HandlerType: (*ReadingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReadingService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/reading/v1/reading.proto",
}
