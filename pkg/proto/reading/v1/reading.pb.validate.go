// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/reading/v1/reading.proto

package reading

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _reading_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListReadingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListReadingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPagination() == nil {
		return ListReadingsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReadingsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if err := m._validateUuid(m.GetDeviceId()); err != nil {
		return ListReadingsRequestValidationError{
			field:  "DeviceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if _, ok := _ListReadingsRequest_Type_InLookup[m.GetType()]; !ok {
		return ListReadingsRequestValidationError{
			field:  "Type",
			reason: "value must be in list [custom]",
		}
	}

	if !_ListReadingsRequest_StartDate_Pattern.MatchString(m.GetStartDate()) {
		return ListReadingsRequestValidationError{
			field:  "StartDate",
			reason: "value does not match regex pattern \"^(\\\\d{13})|(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)$\"",
		}
	}

	if !_ListReadingsRequest_EndDate_Pattern.MatchString(m.GetEndDate()) {
		return ListReadingsRequestValidationError{
			field:  "EndDate",
			reason: "value does not match regex pattern \"^(\\\\d{13})|(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)$\"",
		}
	}

	// no validation rules for Units

	if _, ok := _ListReadingsRequest_Event_InLookup[m.GetEvent()]; !ok {
		return ListReadingsRequestValidationError{
			field:  "Event",
			reason: "value must be in list [uplink downlink ]",
		}
	}

	return nil
}

func (m *ListReadingsRequest) _validateUuid(uuid string) error {
	if matched := _reading_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListReadingsRequestValidationError is the validation error returned by
// ListReadingsRequest.Validate if the designated constraints aren't met.
type ListReadingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReadingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReadingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReadingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReadingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReadingsRequestValidationError) ErrorName() string {
	return "ListReadingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReadingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReadingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReadingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReadingsRequestValidationError{}

var _ListReadingsRequest_Type_InLookup = map[string]struct{}{
	"custom": {},
}

var _ListReadingsRequest_StartDate_Pattern = regexp.MustCompile("^(\\d{13})|(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)$")

var _ListReadingsRequest_EndDate_Pattern = regexp.MustCompile("^(\\d{13})|(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)$")

var _ListReadingsRequest_Event_InLookup = map[string]struct{}{
	"uplink":   {},
	"downlink": {},
	"":         {},
}

// Validate checks the field values on ListReadingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListReadingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetReadings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReadingsResponseValidationError{
				field:  "Readings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListReadingsResponseValidationError is the validation error returned by
// ListReadingsResponse.Validate if the designated constraints aren't met.
type ListReadingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReadingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReadingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReadingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReadingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReadingsResponseValidationError) ErrorName() string {
	return "ListReadingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReadingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReadingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReadingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReadingsResponseValidationError{}
