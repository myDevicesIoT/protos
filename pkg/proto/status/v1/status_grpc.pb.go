// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package status

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeviceStatusServiceClient is the client API for DeviceStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceStatusServiceClient interface {
	//
	//Detect devices status
	Detect(ctx context.Context, in *DeviceStatusRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error)
}

type deviceStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceStatusServiceClient(cc grpc.ClientConnInterface) DeviceStatusServiceClient {
	return &deviceStatusServiceClient{cc}
}

func (c *deviceStatusServiceClient) Detect(ctx context.Context, in *DeviceStatusRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error) {
	out := new(DeviceStatusResponse)
	err := c.cc.Invoke(ctx, "/pkg.proto.status.v1.DeviceStatusService/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceStatusServiceServer is the server API for DeviceStatusService service.
// All implementations should embed UnimplementedDeviceStatusServiceServer
// for forward compatibility
type DeviceStatusServiceServer interface {
	//
	//Detect devices status
	Detect(context.Context, *DeviceStatusRequest) (*DeviceStatusResponse, error)
}

// UnimplementedDeviceStatusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceStatusServiceServer struct {
}

func (UnimplementedDeviceStatusServiceServer) Detect(context.Context, *DeviceStatusRequest) (*DeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}

// UnsafeDeviceStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceStatusServiceServer will
// result in compilation errors.
type UnsafeDeviceStatusServiceServer interface {
	mustEmbedUnimplementedDeviceStatusServiceServer()
}

func RegisterDeviceStatusServiceServer(s *grpc.Server, srv DeviceStatusServiceServer) {
	s.RegisterService(&_DeviceStatusService_serviceDesc, srv)
}

func _DeviceStatusService_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStatusServiceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.status.v1.DeviceStatusService/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStatusServiceServer).Detect(ctx, req.(*DeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceStatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.status.v1.DeviceStatusService",
	HandlerType: (*DeviceStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _DeviceStatusService_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/status/v1/status.proto",
}
