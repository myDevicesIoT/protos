// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/state/v1/types.proto

package state

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _types_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListDeviceStatesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceStatesParam) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeviceStatesParamValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Event

	// no validation rules for Units

	// no validation rules for Format

	// no validation rules for Status

	if v, ok := interface{}(m.GetPartition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeviceStatesParamValidationError{
				field:  "Partition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeviceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeviceStatesParamValidationError{
				field:  "DeviceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDeviceStatesParamValidationError is the validation error returned by
// ListDeviceStatesParam.Validate if the designated constraints aren't met.
type ListDeviceStatesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceStatesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceStatesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceStatesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceStatesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceStatesParamValidationError) ErrorName() string {
	return "ListDeviceStatesParamValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceStatesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceStatesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceStatesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceStatesParamValidationError{}

// Validate checks the field values on ListDeviceStatesOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceStatesOptions) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrderFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeviceStatesOptionsValidationError{
					field:  fmt.Sprintf("OrderFields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDeviceStatesOptionsValidationError is the validation error returned by
// ListDeviceStatesOptions.Validate if the designated constraints aren't met.
type ListDeviceStatesOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceStatesOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceStatesOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceStatesOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceStatesOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceStatesOptionsValidationError) ErrorName() string {
	return "ListDeviceStatesOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceStatesOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceStatesOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceStatesOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceStatesOptionsValidationError{}

// Validate checks the field values on DeviceState with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeviceState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeviceId

	// no validation rules for Status

	if v, ok := interface{}(m.GetSensors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateValidationError{
				field:  "Sensors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CorrelationId

	// no validation rules for HardwareId

	// no validation rules for ApplicationId

	// no validation rules for Type

	// no validation rules for StatusInterval

	if v, ok := interface{}(m.GetStatusUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateValidationError{
				field:  "StatusUpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeviceStateValidationError is the validation error returned by
// DeviceState.Validate if the designated constraints aren't met.
type DeviceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStateValidationError) ErrorName() string { return "DeviceStateValidationError" }

// Error satisfies the builtin error interface
func (e DeviceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStateValidationError{}

// Validate checks the field values on DeviceStates with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeviceStates) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceStatesValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceStatesValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeviceStatesValidationError is the validation error returned by
// DeviceStates.Validate if the designated constraints aren't met.
type DeviceStatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStatesValidationError) ErrorName() string { return "DeviceStatesValidationError" }

// Error satisfies the builtin error interface
func (e DeviceStatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStatesValidationError{}
