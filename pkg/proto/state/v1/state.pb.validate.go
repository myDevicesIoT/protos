// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/state/v1/state.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _state_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetDeviceStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeviceStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetDeviceId()); err != nil {
		return GetDeviceStateRequestValidationError{
			field:  "DeviceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Channel

	// no validation rules for Units

	return nil
}

func (m *GetDeviceStateRequest) _validateUuid(uuid string) error {
	if matched := _state_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetDeviceStateRequestValidationError is the validation error returned by
// GetDeviceStateRequest.Validate if the designated constraints aren't met.
type GetDeviceStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceStateRequestValidationError) ErrorName() string {
	return "GetDeviceStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceStateRequestValidationError{}

// Validate checks the field values on GetDeviceStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeviceStateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceStateResponseValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDeviceStateResponseValidationError is the validation error returned by
// GetDeviceStateResponse.Validate if the designated constraints aren't met.
type GetDeviceStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceStateResponseValidationError) ErrorName() string {
	return "GetDeviceStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceStateResponseValidationError{}

// Validate checks the field values on ListDeviceStatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceStatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetDevices()) < 1 {
		return ListDeviceStatesRequestValidationError{
			field:  "Devices",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if _, ok := _ListDeviceStatesRequest_Event_InLookup[m.GetEvent()]; !ok {
		return ListDeviceStatesRequestValidationError{
			field:  "Event",
			reason: "value must be in list [uplink downlink ]",
		}
	}

	// no validation rules for Units

	if m.GetPagination() == nil {
		return ListDeviceStatesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeviceStatesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDeviceStatesRequestValidationError is the validation error returned by
// ListDeviceStatesRequest.Validate if the designated constraints aren't met.
type ListDeviceStatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceStatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceStatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceStatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceStatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceStatesRequestValidationError) ErrorName() string {
	return "ListDeviceStatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceStatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceStatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceStatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceStatesRequestValidationError{}

var _ListDeviceStatesRequest_Event_InLookup = map[string]struct{}{
	"uplink":   {},
	"downlink": {},
	"":         {},
}

// Validate checks the field values on ListDeviceStatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeviceStatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDevices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeviceStatesResponseValidationError{
				field:  "Devices",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDeviceStatesResponseValidationError is the validation error returned by
// ListDeviceStatesResponse.Validate if the designated constraints aren't met.
type ListDeviceStatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceStatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceStatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceStatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceStatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceStatesResponseValidationError) ErrorName() string {
	return "ListDeviceStatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceStatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceStatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceStatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceStatesResponseValidationError{}
