// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rulelog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RuleLogServiceClient is the client API for RuleLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleLogServiceClient interface {
	// get rule
	Get(ctx context.Context, in *GetRuleLogRequest, opts ...grpc.CallOption) (*GetRuleLogResponse, error)
	// list rules
	List(ctx context.Context, in *ListRuleLogsRequest, opts ...grpc.CallOption) (*ListRuleLogsResponse, error)
}

type ruleLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleLogServiceClient(cc grpc.ClientConnInterface) RuleLogServiceClient {
	return &ruleLogServiceClient{cc}
}

func (c *ruleLogServiceClient) Get(ctx context.Context, in *GetRuleLogRequest, opts ...grpc.CallOption) (*GetRuleLogResponse, error) {
	out := new(GetRuleLogResponse)
	err := c.cc.Invoke(ctx, "/pkg.proto.rulelog.v1.RuleLogService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleLogServiceClient) List(ctx context.Context, in *ListRuleLogsRequest, opts ...grpc.CallOption) (*ListRuleLogsResponse, error) {
	out := new(ListRuleLogsResponse)
	err := c.cc.Invoke(ctx, "/pkg.proto.rulelog.v1.RuleLogService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleLogServiceServer is the server API for RuleLogService service.
// All implementations should embed UnimplementedRuleLogServiceServer
// for forward compatibility
type RuleLogServiceServer interface {
	// get rule
	Get(context.Context, *GetRuleLogRequest) (*GetRuleLogResponse, error)
	// list rules
	List(context.Context, *ListRuleLogsRequest) (*ListRuleLogsResponse, error)
}

// UnimplementedRuleLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuleLogServiceServer struct {
}

func (UnimplementedRuleLogServiceServer) Get(context.Context, *GetRuleLogRequest) (*GetRuleLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRuleLogServiceServer) List(context.Context, *ListRuleLogsRequest) (*ListRuleLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeRuleLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleLogServiceServer will
// result in compilation errors.
type UnsafeRuleLogServiceServer interface {
	mustEmbedUnimplementedRuleLogServiceServer()
}

func RegisterRuleLogServiceServer(s *grpc.Server, srv RuleLogServiceServer) {
	s.RegisterService(&_RuleLogService_serviceDesc, srv)
}

func _RuleLogService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleLogServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.rulelog.v1.RuleLogService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleLogServiceServer).Get(ctx, req.(*GetRuleLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleLogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleLogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.proto.rulelog.v1.RuleLogService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleLogServiceServer).List(ctx, req.(*ListRuleLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.proto.rulelog.v1.RuleLogService",
	HandlerType: (*RuleLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RuleLogService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RuleLogService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/rulelog/v1/rulelog.proto",
}
