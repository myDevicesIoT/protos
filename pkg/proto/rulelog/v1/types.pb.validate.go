// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/rulelog/v1/types.proto

package rulelog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _types_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Delay with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Delay) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	// no validation rules for Time

	return nil
}

// DelayValidationError is the validation error returned by Delay.Validate if
// the designated constraints aren't met.
type DelayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelayValidationError) ErrorName() string { return "DelayValidationError" }

// Error satisfies the builtin error interface
func (e DelayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelayValidationError{}

// Validate checks the field values on TriggerData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TriggerData) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TriggerType

	// no validation rules for TriggersCombination

	for idx, item := range m.GetTriggers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerDataValidationError{
					field:  fmt.Sprintf("Triggers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerDataValidationError{
				field:  "Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TriggerDataValidationError is the validation error returned by
// TriggerData.Validate if the designated constraints aren't met.
type TriggerDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerDataValidationError) ErrorName() string { return "TriggerDataValidationError" }

// Error satisfies the builtin error interface
func (e TriggerDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerDataValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Value

	if v, ok := interface{}(m.GetDateRequested()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionValidationError{
				field:  "DateRequested",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Condition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Operator

	// no validation rules for Value

	// no validation rules for Id

	return nil
}

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on Trigger with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Trigger) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Channel

	// no validation rules for Unit

	// no validation rules for TriggersCombination

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TriggerReading

	// no validation rules for TriggerUnit

	return nil
}

// TriggerValidationError is the validation error returned by Trigger.Validate
// if the designated constraints aren't met.
type TriggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerValidationError) ErrorName() string { return "TriggerValidationError" }

// Error satisfies the builtin error interface
func (e TriggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrigger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerValidationError{}

// Validate checks the field values on RuleLog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RuleLog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AccountId

	// no validation rules for ApplicationId

	// no validation rules for RuleId

	// no validation rules for Status

	// no validation rules for ThingId

	// no validation rules for SensorId

	if v, ok := interface{}(m.GetTriggered()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "Triggered",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDateTriggered()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "DateTriggered",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TriggerReading

	// no validation rules for TriggerUnit

	if v, ok := interface{}(m.GetTriggerData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "TriggerData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAcknowledgedRequired()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "AcknowledgedRequired",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAcknowledged()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "Acknowledged",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDateAcknowledged()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "DateAcknowledged",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleLogValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleLogValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RuleLogValidationError is the validation error returned by RuleLog.Validate
// if the designated constraints aren't met.
type RuleLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleLogValidationError) ErrorName() string { return "RuleLogValidationError" }

// Error satisfies the builtin error interface
func (e RuleLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleLogValidationError{}

// Validate checks the field values on RuleLogs with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RuleLogs) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleLogsValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleLogsValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RuleLogsValidationError is the validation error returned by
// RuleLogs.Validate if the designated constraints aren't met.
type RuleLogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleLogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleLogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleLogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleLogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleLogsValidationError) ErrorName() string { return "RuleLogsValidationError" }

// Error satisfies the builtin error interface
func (e RuleLogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleLogs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleLogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleLogsValidationError{}
