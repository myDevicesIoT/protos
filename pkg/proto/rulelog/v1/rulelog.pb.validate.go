// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/rulelog/v1/rulelog.proto

package rulelog

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _rulelog_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetRuleLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetRuleLogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetRuleLogRequestValidationError is the validation error returned by
// GetRuleLogRequest.Validate if the designated constraints aren't met.
type GetRuleLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleLogRequestValidationError) ErrorName() string {
	return "GetRuleLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuleLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleLogRequestValidationError{}

// Validate checks the field values on GetRuleLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRuleLogResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRuleLogResponseValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetRuleLogResponseValidationError is the validation error returned by
// GetRuleLogResponse.Validate if the designated constraints aren't met.
type GetRuleLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleLogResponseValidationError) ErrorName() string {
	return "GetRuleLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRuleLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleLogResponseValidationError{}

// Validate checks the field values on ListRuleLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRuleLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleId

	// no validation rules for ApplicationId

	// no validation rules for AccountId

	if m.GetPagination() == nil {
		return ListRuleLogsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRuleLogsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRuleLogsRequestValidationError is the validation error returned by
// ListRuleLogsRequest.Validate if the designated constraints aren't met.
type ListRuleLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuleLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuleLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuleLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuleLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuleLogsRequestValidationError) ErrorName() string {
	return "ListRuleLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuleLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuleLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuleLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuleLogsRequestValidationError{}

// Validate checks the field values on ListRuleLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRuleLogsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLogs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRuleLogsResponseValidationError{
				field:  "Logs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRuleLogsResponseValidationError is the validation error returned by
// ListRuleLogsResponse.Validate if the designated constraints aren't met.
type ListRuleLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRuleLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRuleLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRuleLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRuleLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRuleLogsResponseValidationError) ErrorName() string {
	return "ListRuleLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRuleLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuleLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRuleLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRuleLogsResponseValidationError{}
